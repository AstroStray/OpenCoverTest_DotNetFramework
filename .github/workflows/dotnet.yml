# dev 브랜치에 대해서만 테스트 커버리지를 측정하는 실험적인 Action입니다.
name: Dev PR Test Coverage

on:
  pull_request:
    branches: 
      - dev
      - main

jobs:
  check-tests:
    runs-on: windows-latest
    outputs:
      has_tests: ${{ steps.check.outputs.has_tests }}
      is_framework: ${{ steps.detect.outputs.is_framework }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for test files
      id: check
      run: |
        $mainProject = Test-Path "OpenCoverTest/OpenCoverTest.csproj"
        $testProject = Test-Path "OpenCoverTest.Tests/OpenCoverTest.Tests.csproj"
        
        if ($mainProject -and $testProject) {
          echo "has_tests=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "has_tests=false" >> $env:GITHUB_OUTPUT
        }
      shell: powershell

    - name: Detect project type
      id: detect
      run: |
        if ((Get-ChildItem -Recurse -Filter "*.csproj" | Select-String "<TargetFramework>net47" -Quiet) -or
            (Get-ChildItem -Recurse -Filter "*.csproj" | Select-String "<TargetFrameworkVersion>v4.7" -Quiet) -or
            (Get-ChildItem -Recurse -Filter "packages.config" -ErrorAction SilentlyContinue)) {
          echo "is_framework=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "is_framework=false" >> $env:GITHUB_OUTPUT
        }
      shell: powershell

    - name: No tests warning
      if: steps.check.outputs.has_tests == 'false'
      run: |
        Write-Host "::warning::테스트 코드가 존재하지 않습니다."
      shell: powershell

  test-coverage:
    needs: check-tests
    if: needs.check-tests.outputs.has_tests == 'true'
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    # .NET Framework 설정
    - name: Setup MSBuild (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup NuGet (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      uses: NuGet/setup-nuget@v1
      
    - name: Install XUnit Console Runner (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      run: |
        nuget install xunit.runner.console -OutputDirectory tools

    - name: Install OpenCover (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      run: |
        nuget install OpenCover -OutputDirectory tools
        nuget install ReportGenerator -OutputDirectory tools

    # .NET 5+ 설정
    - name: Setup .NET SDK
      if: needs.check-tests.outputs.is_framework == 'false'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'  # Migration시 변경 필요

    # 의존성 복원
    - name: Restore packages (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      run: nuget restore

    - name: Restore dependencies (.NET 5+)
      if: needs.check-tests.outputs.is_framework == 'false'
      run: dotnet restore

    # 빌드
    - name: Build (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      run: msbuild /p:Configuration=Debug /p:Platform=x64

    - name: Build (.NET 5+)
      if: needs.check-tests.outputs.is_framework == 'false'
      run: dotnet build --configuration Debug --no-restore

    # 테스트 및 커버리지
    - name: Run tests with coverage (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      run: |
        $opencover = Get-ChildItem -Recurse -Path "tools" -Filter "OpenCover.Console.exe" | Select-Object -First 1
        $xunit = Get-ChildItem -Recurse -Path "tools" -Filter "xunit.console.exe" | Select-Object -First 1
        
        # 테스트 DLL 경로 찾기
        $testDll = @(
          "OpenCoverTest.Tests\bin\Debug\OpenCoverTest.Tests.dll",
          "OpenCoverTest.Tests\bin\Debug\net472\OpenCoverTest.Tests.dll",
          "OpenCoverTest.Tests\bin\Debug\net48\OpenCoverTest.Tests.dll"
        ) | Where-Object { Test-Path $_ } | Select-Object -First 1
        
        if (-not $testDll) {
          Write-Error "테스트 DLL을 찾을 수 없습니다."
          exit 1
        }
        
        Write-Host "테스트 DLL: $testDll"
        Write-Host "OpenCover: $($opencover.FullName)"
        Write-Host "XUnit: $($xunit.FullName)"
        
        & $opencover.FullName `
          -target:$xunit.FullName `
          -targetargs:"$testDll -noshadow" `
          -output:coverage.xml `
          -register:user `
          -filter:"+[OpenCoverTest.*]* -[*Tests*]*"

    - name: Run tests with coverage (.NET 5+)
      if: needs.check-tests.outputs.is_framework == 'false'
      run: dotnet test --configuration Debug --collect:"XPlat Code Coverage" --results-directory ./coverage

    # 커버리지 리포트 생성
    - name: Generate coverage report (.NET Framework)
      if: needs.check-tests.outputs.is_framework == 'true'
      run: |
        $reportgen = Get-ChildItem -Recurse -Filter "ReportGenerator.exe" | Select-Object -First 1
        & $reportgen.FullName -reports:coverage.xml -targetdir:coverage-report

    - name: Generate coverage report (.NET 5+)
      if: needs.check-tests.outputs.is_framework == 'false'
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:coverage/**/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html

    # 커버리지 리포트 업로드
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/
