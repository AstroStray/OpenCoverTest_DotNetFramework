# 브랜치 병합 시 테스트 커버리지를 측정하는 실험적인 Action입니다.
name: Test Coverage CI for .NET Framework

on:
  pull_request:
    branches: 
      - dev
      - main

jobs:
  # 1단계: 프로젝트 타입을 확인하고 테스트 존재 여부를 검사하는 작업
  check-project:
    runs-on: windows-latest
    outputs:
      has_tests: ${{ steps.check.outputs.has_tests }}
      is_framework: ${{ steps.detect.outputs.is_framework }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for test files
      id: check
      run: |
        if (Test-Path "OpenCoverTest.Tests/OpenCoverTest.Tests.csproj") {
          echo "has_tests=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "has_tests=false" >> $env:GITHUB_OUTPUT
          Write-Host "::warning::Test project (OpenCoverTest.Tests.csproj) not found."
        }
      shell: powershell

    - name: Detect .NET Framework
      id: detect
      run: |
        if ((Get-ChildItem -Recurse -Filter "*.csproj" | Select-String "<TargetFramework>net47" -Quiet) -or
            (Get-ChildItem -Recurse -Filter "*.csproj" | Select-String "<TargetFrameworkVersion>v4.7" -Quiet) -or
            (Test-Path -Path "**/packages.config" -PathType Leaf)) {
          echo "is_framework=true" >> $env:GITHUB_OUTPUT
          Write-Host "Project type detected: .NET Framework"
        } else {
          echo "is_framework=false" >> $env:GITHUB_OUTPUT
          Write-Host "Project type detected: .NET 5+"
        }
      shell: powershell

  # 2단계: 확인된 프로젝트 타입에 맞춰 빌드 및 커버리지 측정
  build-and-test:
    needs: check-project
    if: needs.check-project.outputs.has_tests == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup NuGet (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      uses: NuGet/setup-nuget@v1
      
    - name: Install and Pin Tool Versions (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      run: |
        nuget install xunit.runner.console -Version 2.4.1 -OutputDirectory tools
        nuget install xunit.runner.reporters -Version 2.4.1 -OutputDirectory tools
        nuget install OpenCover -Version 4.7.922 -OutputDirectory tools
        nuget install ReportGenerator -Version 5.1.9 -OutputDirectory tools

    - name: Restore packages (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      run: nuget restore OpenCoverTest.sln

    - name: Build (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      run: |
        echo "=== Building solution ==="
        msbuild OpenCoverTest.sln /p:Configuration=Debug /p:Platform="x64" /p:DebugSymbols=true /p:DebugType=full /verbosity:minimal
        
        echo "=== Post-build: Checking actual output paths ==="
        
        echo "--- OpenCoverTest project outputs ---"
        if (Test-Path "OpenCoverTest/bin") {
          Get-ChildItem "OpenCoverTest/bin" -Recurse -Include "*.exe","*.dll","*.pdb" | ForEach-Object { 
            Write-Host "MAIN: $($_.FullName.Replace($PWD.Path + '\', ''))" 
          }
        }
        
        echo "--- OpenCoverTest.Tests project outputs ---"
        if (Test-Path "OpenCoverTest.Tests/bin") {
          Get-ChildItem "OpenCoverTest.Tests/bin" -Recurse -Include "*.exe","*.dll","*.pdb" | ForEach-Object { 
            Write-Host "TEST: $($_.FullName.Replace($PWD.Path + '\', ''))" 
          }
        }
        
        echo "=== Verifying expected paths ==="
        $expectedPaths = @(
          "OpenCoverTest/bin/x64/Debug/OpenCoverTest.exe",
          "OpenCoverTest/bin/Debug/OpenCoverTest.exe", 
          "OpenCoverTest.Tests/bin/x64/Debug/OpenCoverTest.Tests.dll",
          "OpenCoverTest.Tests/bin/Debug/OpenCoverTest.Tests.dll"
        )
        
        foreach ($path in $expectedPaths) {
          if (Test-Path $path) {
            Write-Host "✅ EXISTS: $path"
          } else {
            Write-Host "❌ MISSING: $path"
          }
        }
      shell: powershell

    - name: Run tests with coverage (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      shell: powershell
      run: |
        # Tool paths
        $opencover = "tools/OpenCover.4.7.922/tools/OpenCover.Console.exe"
        $xunit = "tools/xunit.runner.console.2.4.1/tools/net472/xunit.console.exe"
        
        Write-Host "=== Finding actual test assembly location ==="
        
        # 가능한 테스트 어셈블리 경로들을 우선순위 순으로 검색
        $possibleTestPaths = @(
          "OpenCoverTest.Tests/bin/x64/Debug/OpenCoverTest.Tests.dll",
          "OpenCoverTest.Tests/bin/Debug/OpenCoverTest.Tests.dll",
          "OpenCoverTest.Tests/bin/x64/Release/OpenCoverTest.Tests.dll",
          "OpenCoverTest.Tests/bin/Release/OpenCoverTest.Tests.dll"
        )
        
        $testAssembly = $null
        $testDir = $null
        
        foreach ($path in $possibleTestPaths) {
          if (Test-Path $path) {
            $testAssembly = $path
            $testDir = Split-Path $path -Parent
            Write-Host "✅ Found test assembly: $testAssembly"
            break
          }
        }
        
        if (-not $testAssembly) {
          Write-Error "❌ Could not find test assembly in any expected location!"
          Write-Host "Available files in OpenCoverTest.Tests/bin/:"
          if (Test-Path "OpenCoverTest.Tests/bin") {
            Get-ChildItem "OpenCoverTest.Tests/bin" -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
          }
          exit 1
        }
        
        Write-Host "=== Checking test directory contents ==="
        Write-Host "Test directory: $testDir"
        Get-ChildItem $testDir | ForEach-Object { 
          $type = if ($_.Extension -eq ".exe") { "EXE" } elseif ($_.Extension -eq ".dll") { "DLL" } elseif ($_.Extension -eq ".pdb") { "PDB" } else { "OTHER" }
          Write-Host "  $type`: $($_.Name)" 
        }
        
        # 테스트 디렉토리로 이동
        Push-Location $testDir
        
        # 상대 경로로 도구 위치 계산
        $levels = ($testDir -split '[/\\]').Count
        $relativePath = "../" * $levels
        
        $opencoverPath = (Resolve-Path "$relativePath$opencover").Path
        $xunitPath = (Resolve-Path "$relativePath$xunit").Path
        
        Write-Host "=== Executing OpenCover from test directory ==="
        Write-Host "Working directory: $(Get-Location)"
        Write-Host "OpenCover path: $opencoverPath"
        Write-Host "XUnit path: $xunitPath"
        Write-Host "Test assembly: $(Split-Path $testAssembly -Leaf)"
        
        # OpenCover 실행 (현재 디렉토리에서)
        $testDllName = Split-Path $testAssembly -Leaf
        
        & $opencoverPath `
          -target:"$xunitPath" `
          -targetargs:"$testDllName -noshadow -xml testresults.xml" `
          -output:"coverage.xml" `
          -register:user `
          -filter:"+[*OpenCoverTest*]* -[xunit*]* -[Microsoft*]* -[System*]*" `
          -searchdirs:"." `
          -mergebyhash `
          -showunvisited
        
        # 원래 디렉토리로 돌아가기
        Pop-Location
        
        # 결과 파일들을 루트로 복사
        $coverageFile = "$testDir/coverage.xml"
        $testResultFile = "$testDir/testresults.xml"
        
        if (Test-Path $coverageFile) {
          Copy-Item $coverageFile "coverage.xml"
          Write-Host "✅ Coverage file copied to root"
          
          # Coverage 내용 확인
          $coverageContent = Get-Content "coverage.xml" -Raw
          if ($coverageContent -match "<Modules />") {
            Write-Host "⚠️  WARNING: Coverage is empty - no modules instrumented"
          } else {
            Write-Host "✅ Coverage data found!"
          }
          
          # Coverage 요약 표시
          Write-Host "=== Coverage XML Summary ==="
          Get-Content "coverage.xml" -TotalCount 15 | ForEach-Object { Write-Host $_ }
        } else {
          Write-Error "❌ Coverage.xml was not generated"
          exit 1
        }
        
        # 테스트 결과도 복사
        if (Test-Path $testResultFile) {
          Copy-Item $testResultFile "testresults.xml"
          Write-Host "✅ Test results copied to root"
        }

    - name: Generate coverage report (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      shell: powershell
      run: |
        # Tool path explicitly specified for stability
        $reportgen = "tools/ReportGenerator.5.1.9/tools/net47/ReportGenerator.exe"
        & $reportgen -reports:coverage.xml -targetdir:coverage-report -reporttypes:Html

    - name: Setup .NET SDK (.NET 5+)
      if: needs.check-project.outputs.is_framework == 'false'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore, Build, and Test with Coverage (.NET 5+)
      if: needs.check-project.outputs.is_framework == 'false'
      run: dotnet test --collect:"XPlat Code Coverage"

    - name: Generate coverage report (.NET 5+)
      if: needs.check-project.outputs.is_framework == 'false'
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coverage-report" "-reporttypes:Html"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          testresults.xml
          coverage.xml
        retention-days: 30
