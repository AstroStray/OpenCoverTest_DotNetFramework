# 브랜치 병합 시 테스트 커버리지를 측정하는 실험적인 Action입니다.
name: Test Coverage CI for .NET Framework

on:
  pull_request:
    branches: 
      - dev
      - main

jobs:
  # 1단계: 프로젝트 타입을 확인하고 테스트 존재 여부를 검사하는 작업
  check-project:
    runs-on: windows-latest
    outputs:
      has_tests: ${{ steps.check.outputs.has_tests }}
      is_framework: ${{ steps.detect.outputs.is_framework }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for test files
      id: check
      run: |
        if (Test-Path "OpenCoverTest.Tests/OpenCoverTest.Tests.csproj") {
          echo "has_tests=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "has_tests=false" >> $env:GITHUB_OUTPUT
          Write-Host "::warning::Test project (OpenCoverTest.Tests.csproj) not found."
        }
      shell: powershell

    - name: Detect .NET Framework
      id: detect
      run: |
        if ((Get-ChildItem -Recurse -Filter "*.csproj" | Select-String "<TargetFramework>net47" -Quiet) -or
            (Get-ChildItem -Recurse -Filter "*.csproj" | Select-String "<TargetFrameworkVersion>v4.7" -Quiet) -or
            (Test-Path -Path "**/packages.config" -PathType Leaf)) {
          echo "is_framework=true" >> $env:GITHUB_OUTPUT
          Write-Host "Project type detected: .NET Framework"
        } else {
          echo "is_framework=false" >> $env:GITHUB_OUTPUT
          Write-Host "Project type detected: .NET 5+"
        }
      shell: powershell

  # 2단계: 확인된 프로젝트 타입에 맞춰 빌드 및 커버리지 측정
  build-and-test:
    needs: check-project
    if: needs.check-project.outputs.has_tests == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup NuGet (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      uses: NuGet/setup-nuget@v1
      
    - name: Install and Pin Tool Versions (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      run: |
        nuget install xunit.runner.console -Version 2.4.1 -OutputDirectory tools
        nuget install xunit.runner.reporters -Version 2.4.1 -OutputDirectory tools
        nuget install OpenCover -Version 4.7.922 -OutputDirectory tools
        nuget install Coverlet.Console -Version 6.0.0 -OutputDirectory tools
        nuget install ReportGenerator -Version 5.1.9 -OutputDirectory tools

    - name: Restore packages (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      run: nuget restore OpenCoverTest.sln

    - name: Build (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      run: msbuild OpenCoverTest.sln /p:Configuration=Debug /p:Platform="x64" /p:DebugSymbols=true /p:DebugType=full

    - name: Run tests with coverage (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      shell: powershell
      run: |
        # Tool paths explicitly specified for stability
        $opencover = "tools/OpenCover.4.7.922/tools/OpenCover.Console.exe"
        $xunit = "tools/xunit.runner.console.2.4.1/tools/net472/xunit.console.exe"
        $testAssembly = "OpenCoverTest.Tests/bin/x64/Debug/OpenCoverTest.Tests.dll"
        $testDir = "OpenCoverTest.Tests/bin/x64/Debug"
        
        # Debug: 파일들이 존재하는지 확인
        Write-Host "=== Checking files ==="
        Write-Host "Test assembly exists: $(Test-Path $testAssembly)"
        Get-ChildItem $testDir -Filter "*.exe" | ForEach-Object { Write-Host "EXE: $($_.Name)" }
        Get-ChildItem $testDir -Filter "*.pdb" | ForEach-Object { Write-Host "PDB: $($_.Name)" }
        
        # 테스트 디렉토리로 이동
        Push-Location $testDir
        
        # 절대 경로로 도구 실행
        $opencoverPath = (Resolve-Path "../../../../$opencover").Path
        $xunitPath = (Resolve-Path "../../../../$xunit").Path
        
        Write-Host "=== Attempting coverage with broad filter ==="
        & $opencoverPath `
          -target:"$xunitPath" `
          -targetargs:"OpenCoverTest.Tests.dll -noshadow" `
          -output:"coverage.xml" `
          -register:user `
          -filter:"+[*]* -[*Test*]* -[xunit*]* -[Microsoft*]* -[System*]*" `
          -searchdirs:"." `
          -mergebyhash `
          -showunvisited
        
        # 원래 디렉토리로 돌아가기
        Pop-Location
        
        # coverage.xml 체크
        $coverageFile = "$testDir/coverage.xml"
        if (Test-Path $coverageFile) {
          Copy-Item $coverageFile "coverage.xml"
          Write-Host "Coverage file copied to root directory"
          
          # 더 많은 coverage.xml 내용 보기
          Write-Host "=== Coverage XML content ==="
          $coverageContent = Get-Content "coverage.xml"
          $coverageContent | Select-Object -First 30 | ForEach-Object { Write-Host $_ }
          
          # Modules가 비어있는지 확인
          if ($coverageContent -match "<Modules />") {
            Write-Host "=== WARNING: No modules found in coverage! ==="
            Write-Host "This usually means the tests don't actually execute main application code."
            Write-Host "Let's try a different approach..."
            
            # 대안: 프로세스 모니터링 방식
            Push-Location $testDir
            
            Write-Host "=== Trying with different target approach ==="
            & $opencoverPath `
              -target:"OpenCoverTest.exe" `
              -targetargs:"-test" `
              -output:"coverage2.xml" `
              -register:user `
              -filter:"+[OpenCoverTest]* -[*Test*]*" `
              -searchdirs:"." `
              2>&1 | Out-Host
            
            Pop-Location
            
            if (Test-Path "$testDir/coverage2.xml") {
              Copy-Item "$testDir/coverage2.xml" "coverage2.xml"
              Write-Host "=== Alternative coverage attempt completed ==="
            }
          }
        } else {
          Write-Error "Coverage.xml file was not generated."
          exit 1
        }

    - name: Generate coverage report (.NET Framework)
      if: needs.check-project.outputs.is_framework == 'true'
      shell: powershell
      run: |
        # Tool path explicitly specified for stability
        $reportgen = "tools/ReportGenerator.5.1.9/tools/net47/ReportGenerator.exe"
        & $reportgen -reports:coverage.xml -targetdir:coverage-report -reporttypes:Html

    - name: Setup .NET SDK (.NET 5+)
      if: needs.check-project.outputs.is_framework == 'false'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore, Build, and Test with Coverage (.NET 5+)
      if: needs.check-project.outputs.is_framework == 'false'
      run: dotnet test --collect:"XPlat Code Coverage"

    - name: Generate coverage report (.NET 5+)
      if: needs.check-project.outputs.is_framework == 'false'
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coverage-report" "-reporttypes:Html"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report
